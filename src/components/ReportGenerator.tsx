
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { FileText, Download, BarChart3 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import jsPDF from "jspdf";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';

interface ReportGeneratorProps {
  transactions: any[];
  currency: string;
  formatCurrency: (amount: number) => string;
}

export const ReportGenerator = ({ transactions, currency, formatCurrency }: ReportGeneratorProps) => {
  const [reportType, setReportType] = useState('monthly');
  const { toast } = useToast();

  const chartData = [
    { name: 'Food', value: 400 },
    { name: 'Transport', value: 300 },
    { name: 'Entertainment', value: 200 },
    { name: 'Utilities', value: 150 }
  ];

  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];

  const generateReport = () => {
    try {
      const doc = new jsPDF();
      
      // Header with better formatting
      doc.setFontSize(20);
      doc.text(`FinnTra ${reportType.charAt(0).toUpperCase()+reportType.slice(1)} Report`, 20, 30);
      
      // Company info
      doc.setFontSize(12);
      doc.text('Financial Analytics Dashboard', 20, 45);
      doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 55);
      
      // Summary section
      doc.setFontSize(16);
      doc.text('Executive Summary', 20, 75);
      
      doc.setFontSize(12);
      doc.text(`Report Period: ${reportType}`, 20, 90);
      doc.text(`Currency: ${currency}`, 20, 100);
      doc.text(`Total Transactions: ${transactions.length}`, 20, 110);
      
      // Calculate totals
      const totalIncome = transactions.filter(t => t.amount > 0).reduce((sum, t) => sum + t.amount, 0);
      const totalExpenses = transactions.filter(t => t.amount < 0).reduce((sum, t) => sum + Math.abs(t.amount), 0);
      const netAmount = totalIncome - totalExpenses;
      
      doc.text(`Total Income: ${formatCurrency(totalIncome)}`, 20, 120);
      doc.text(`Total Expenses: ${formatCurrency(totalExpenses)}`, 20, 130);
      doc.text(`Net Amount: ${formatCurrency(netAmount)}`, 20, 140);
      
      // Expense breakdown
      doc.setFontSize(16);
      doc.text('Expense Breakdown by Category', 20, 165);
      
      doc.setFontSize(12);
      let yPos = 180;
      chartData.forEach((item, index) => {
        doc.text(`${item.name}: ${formatCurrency(item.value)}`, 30, yPos);
        yPos += 10;
      });
      
      // Transaction details
      doc.addPage();
      doc.setFontSize(16);
      doc.text('Recent Transactions', 20, 30);
      
      doc.setFontSize(10);
      yPos = 50;
      transactions.slice(0, 30).forEach((transaction, index) => {
        const description = transaction.description || `Transaction ${index + 1}`;
        const amount = transaction.amount > 0 ? `+${formatCurrency(transaction.amount)}` : `-${formatCurrency(Math.abs(transaction.amount))}`;
        const date = transaction.date || new Date().toLocaleDateString();
        
        doc.text(`${date} | ${description} | ${amount}`, 20, yPos);
        yPos += 8;
        
        if (yPos > 270) {
          doc.addPage();
          yPos = 30;
        }
      });
      
      // Charts section
      doc.addPage();
      doc.setFontSize(16);
      doc.text('Analytics Charts', 20, 30);
      
      doc.setFontSize(12);
      doc.text('Chart Breakdown:', 20, 50);
      doc.text('• Expense distribution by category', 30, 65);
      doc.text('• Monthly spending trends analysis', 30, 75);
      doc.text('• Income vs Expenses comparison', 30, 85);
      doc.text('• Budget performance metrics', 30, 95);
      
      // Footer
      doc.setFontSize(8);
      doc.text('Generated by FinnTra Financial Management System', 20, 280);
      
      doc.save(`${reportType}-financial-report-${new Date().toISOString().split('T')[0]}.pdf`);
      
      toast({
        title: "Report Downloaded Successfully!",
        description: `Your ${reportType} financial report has been generated and downloaded.`,
      });
    } catch (error) {
      console.error('PDF generation error:', error);
      toast({
        title: "Download Failed",
        description: "There was an error generating your report. Please try again.",
        variant: "destructive"
      });
    }
  };

  return (
    <Card className="shadow-lg border-0">
      <CardHeader>
        <div className="flex items-center space-x-2">
          <FileText className="h-5 w-5 text-blue-600" />
          <CardTitle className="text-lg font-semibold">Enhanced Reports</CardTitle>
        </div>
        <CardDescription>Generate detailed financial reports with analytics</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {/* Chart Preview */}
          <div className="h-32 mb-4">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={chartData}
                  cx="50%"
                  cy="50%"
                  innerRadius={20}
                  outerRadius={40}
                  dataKey="value"
                >
                  {chartData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip formatter={(value) => formatCurrency(Number(value))} />
              </PieChart>
            </ResponsiveContainer>
          </div>
          
          <div>
            <label className="text-sm font-medium mb-2 block">Report Period</label>
            <Select value={reportType} onValueChange={setReportType}>
              <SelectTrigger>
                <SelectValue placeholder="Select report type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="weekly">Weekly Report</SelectItem>
                <SelectItem value="monthly">Monthly Report</SelectItem>
                <SelectItem value="quarterly">Quarterly Report</SelectItem>
                <SelectItem value="yearly">Yearly Report</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <Button onClick={generateReport} className="w-full bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700">
            <Download className="h-4 w-4 mr-2" />
            Generate Enhanced PDF Report
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};
